package br.com.cepedi.ShoppingStore.controller.productratingtest;

import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;

@WebMvcTest
	@AutoConfigureMockMvc
	@ExtendWith(MockitoExtension.class)
	@ExtendWith(SpringExtension.class)
	public class ProductRatingControllerTest {

	    @Autowired
	    private MockMvc mockMvc;

	    @MockBean
	    private ProductRatingService productRatingService;

	    @Test
	    void testRegisterProductRating() throws Exception {
	        String requestBody = "{\"productId\":1,\"ratingStars\":5,\"review\":\"Great product!\",\"userId\":1}";
	        mockMvc.perform(MockMvcRequestBuilders.post("/api/v2/product-ratings")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(requestBody))
	                .andExpect(MockMvcResultMatchers.status().isCreated());
	    }

	    @Test
	    void testListAllProductRatings() throws Exception {
	        Page<ProductRatingDetails> productRatings = new PageImpl<>(Collections.emptyList());
	        when(productRatingService.listAllProductRatings(any())).thenReturn(productRatings);
	        mockMvc.perform(MockMvcRequestBuilders.get("/api/v2/product-ratings"))
	                .andExpect(MockMvcResultMatchers.status().isOk());
	    }

	    @Test
	    void testGetProductRatingById() throws Exception {
	        ProductRatingDetails productRating = new ProductRatingDetails(1L, 1L, 5, "Great product!", 1L);
	        when(productRatingService.getProductRatingById(any())).thenReturn(productRating);
	        mockMvc.perform(MockMvcRequestBuilders.get("/api/v2/product-ratings/1"))
	                .andExpect(MockMvcResultMatchers.status().isOk());
	    }

	    @Test
	    void testUpdateProductRating() throws Exception {
	        String requestBody = "{\"productId\":1,\"ratingStars\":4,\"review\":\"Good product!\",\"userId\":1}";
	        mockMvc.perform(MockMvcRequestBuilders.put("/api/v2/product-ratings/1")
	                .contentType(MediaType.APPLICATION_JSON)
	                .content(requestBody))
	                .andExpect(MockMvcResultMatchers.status().isOk());
	    }

	    @Test
	    void testDisableProductRating() throws Exception {
	        mockMvc.perform(MockMvcRequestBuilders.delete("/api/v2/product-ratings/1"))
	                .andExpect(MockMvcResultMatchers.status().isNoContent());
	    }
	}
