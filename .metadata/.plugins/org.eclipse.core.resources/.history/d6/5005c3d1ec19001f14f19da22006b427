package br.com.cepedi.ShoppingStore.controller.brandtest;


import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import br.com.cepedi.ShoppingStore.model.records.brand.details.DataBrandDetails;
import br.com.cepedi.ShoppingStore.service.brand.BrandService;
import io.swagger.v3.oas.models.media.MediaType;

import java.util.Collections;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;


@WebMvcTest
@AutoConfigureMockMvc
@ExtendWith(MockitoExtension.class)
@ExtendWith(SpringExtension.class)
public class BrandControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private BrandService brandService;

    @Test
    void testRegisterBrand() throws Exception {
        String requestBody = "{\"name\":\"Test Brand\"}";
        mockMvc.perform(MockMvcRequestBuilders.post("/api/v2/brands")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(MockMvcResultMatchers.status().isCreated());
    }

    @Test
    void testListAllBrands() throws Exception {
        Page<DataBrandDetails> brands = new PageImpl<>(Collections.emptyList());
        when(brandService.listAllBrands(any())).thenReturn(brands);
        mockMvc.perform(MockMvcRequestBuilders.get("/api/v2/brands"))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void testGetBrandById() throws Exception {
        DataBrandDetails brand = new DataBrandDetails(1L, "Test Brand");
        when(brandService.getBrandById(any())).thenReturn(brand);
        mockMvc.perform(MockMvcRequestBuilders.get("/api/v2/brands/1"))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void testUpdateBrand() throws Exception {
        String requestBody = "{\"name\":\"Updated Test Brand\"}";
        mockMvc.perform(MockMvcRequestBuilders.put("/api/v2/brands/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(requestBody))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }

    @Test
    void testDisableBrand() throws Exception {
        mockMvc.perform(MockMvcRequestBuilders.delete("/api/v2/brands/1"))
                .andExpect(MockMvcResultMatchers.status().isNoContent());
    }
}
}
*/